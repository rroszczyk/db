<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/Wykładowca/Desktop/db/nowa.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="1977"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,4:mainPets"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Alphabetical list of products" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="73"/><column index="2" value="206"/><column index="3" value="74"/><column index="4" value="82"/><column index="5" value="126"/><column index="6" value="65"/><column index="7" value="89"/><column index="8" value="94"/><column index="9" value="95"/><column index="10" value="91"/><column index="11" value="103"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Pets" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths/><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">-- DROP TABLE People;
-- CREATE TABLE People (
--     Id integer PRIMARY KEY AUTOINCREMENT,
--     FirstName text NOT NULL,
-- 	LastName text DEFAULT &quot;Kowalski&quot;,
-- 	SID text 
-- );
-- 
-- INSERT INTO People (FirstName, LastName, SID) VALUES (&quot;Anna&quot;, &quot;Malinowska&quot;, 5000);
-- INSERT INTO People (FirstName, LastName, SID) VALUES (&quot;Jolanta&quot;, &quot;Malinowska&quot;, 5001);
-- INSERT INTO People (FirstName, SID) VALUES (&quot;Zofia&quot;, 6000);


-- SELECT * FROM People

SELECT * FROM dane</sql><sql name="SQL 2">-- SELECT * FROM dane;
-- 
-- 
-- INSERT INTO People (FirstName, LastName, SID)
-- -- 	SELECT firstName, lastName, sid FROM dane;

-- SELECT * FROM People;

PRAGMA writable_schema=ON
</sql><sql name="SQL 3">-- CREATE TABLE Names (
--    NameId INTEGER PRIMARY KEY AUTOINCREMENT,
--    Name
-- );

-- INSERT INTO Names (Name) 
-- SELECT DISTINCT firstName FROM People

-- CREATE TABLE PeopleN AS
-- SELECT P.Id, N.NameId, P.LastName, P.SID FROM People AS P
--    LEFT JOIN Names AS N ON P.FirstName = N.Name


SELECT P.Id, N.Name AS FirstName, P.LastName, P.SID FROM PeopleN AS P
LEFT JOIN Names AS N ON P.NameId = N.NameId</sql><sql name="SQL 4">-- CREATE TABLE Colours (Id INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT);
-- INSERT INTO Colours (Name) SELECT DISTINCT Colour FROM dane;

SELECT 'Total', COUNT(*) AS Counter FROM dane
UNION
SELECT 'FirstName1', COUNT(DISTINCT FirstName1) AS Counter FROM DANE
UNION
SELECT 'FistName2', COUNT(DISTINCT FirstName2) AS Counter FROM DANE
UNION
SELECT 'Country', COUNT(DISTINCT Country) AS Counter FROM DANE
UNION
SELECT 'Region', COUNT(DISTINCT Region) AS Counter FROM DANE
UNION
SELECT 'Pet', COUNT(DISTINCT Pet) AS Counter FROM DANE
UNION
SELECT 'Profession', COUNT(DISTINCT Profession) AS Counter FROM DANE</sql><sql name="SQL 5">SELECT * FROM dane</sql><sql name="SQL 6">-- CREATE TABLE Testowa (
-- 	Id INTEGER PRIMARY KEY AUTOINCREMENT,
-- 	Pole1 TEXT,
-- 	Pole2 TEXT NOT NULL,
-- 	Pole3 TEXT UNIQUE,
-- 	Pole4 TEXT DEFAULT &quot;Coś&quot;
-- ;

-- CREATE TABLE Testowa1 (
-- 	Id INTEGER PRIMARY KEY AUTOINCREMENT,
-- 	Pole1 TEXT,
-- 	Pole2 TEXT UNIQUE NOT NULL,
-- 	Pole3 TEXT UNIQUE,
-- 	Pole4 TEXT DEFAULT &quot;Coś&quot;
-- ;


-- INSERT INTO Testowa (Pole1, Pole2, Pole3, Pole4) VALUES (&quot;Abc&quot;, &quot;Cde&quot;, &quot;Gef&quot;, &quot;Xyz&quot;);
-- INSERT INTO Testowa (Pole2, Pole3, Pole4) VALUES (&quot;Cde&quot;, &quot;Gef1&quot;, &quot;Xyz&quot;);
-- INSERT INTO Testowa (Pole1, Pole3, Pole4) VALUES (&quot;Abc&quot;, &quot;Gef2&quot;, &quot;Xyz&quot;); NOT NULL
-- INSERT INTO Testowa (Pole1, Pole2, Pole4) VALUES (&quot;Abc&quot;, &quot;Cde&quot;, &quot;Xyz&quot;);
--INSERT INTO Testowa (Pole1, Pole2, Pole3) VALUES (&quot;Abc&quot;, &quot;Cde&quot;, &quot;Gef3&quot;);


SELECT Id, Pole1, Pole2, coalesce(Pole3, 'Ala'), Pole3 FROM Testowa;

-- SELECT * FROM sqlite_sequence;</sql><sql name="SQL 7">-- CREATE TABLE IF NOT EXISTS People (
-- 	Id INTEGER PRIMARY KEY AUTOINCREMENT,
-- 	FirstName NOT NULL,
-- 	LastName NOT NULL,
-- 	SID INTEGER DEFAULT 1000
-- );
-- INSERT INTO People (FirstName, LastName, SID) VALUES ('Anna', 'Kowalska', 1000);
-- INSERT INTO People (FirstName, LastName, SID) VALUES ('Ewa', 'Buczkowska', 1002);
-- INSERT INTO People (FirstName, LastName, SID) VALUES ('Roman', 'Kwiatkowski', 1003);
-- DELETE FROM People WHERE Id=3;
--INSERT INTO People (FirstName, LastName, SID) VALUES ('Roman', 'Kwiatkowski', 1003);
-- UPDATE People SET SID=1001 WHERE SID=1003;

-- SELECT * FROM People;

-- INSERT INTO People (firstName, lastName, SID) 
-- SELECT firstName, lastName, SID FROM daneImport;

-- SELECT COUNT(DISTINCT firstName) FROM People;

-- CREATE TABLE Names (
-- 	Id INTEGER PRIMARY KEY AUTOINCREMENT,
-- 	Name TEXT
-- );

--INSERT INTO Names (Name) SELECT DISTINCT firstName FROM People ORDER BY firstName;

</sql><sql name="SQL 8">
-- CREATE TABLE NPeople AS
-- SELECT P.Id, P.LastName, P.SID, N.Id AS FirstNameId FROM People AS P
-- 	LEFT JOIN Names AS N ON N.Name = P.FirstName;

SELECT P.Id, N.Name AS FirsName, P.LastName, P.SID FROM NPeople AS P
	LEFT JOIN Names AS N ON P.FirstNameId = N.Id </sql><sql name="SQL 9">SELECT * FROM dane

SELECT 'Total', COUNT(*) AS Counter FROM dane
UNION
SELECT 'FirstName1', COUNT(DISTINCT FirstName1) AS Counter FROM DANE
UNION
SELECT 'FistName2', COUNT(DISTINCT FirstName2) AS Counter FROM DANE
UNION
SELECT 'Country', COUNT(DISTINCT Country) AS Counter FROM DANE
UNION
SELECT 'Region', COUNT(DISTINCT Region) AS Counter FROM DANE
UNION
SELECT 'Pet', COUNT(DISTINCT Pet) AS Counter FROM DANE
UNION
SELECT 'Profession', COUNT(DISTINCT Profession) AS Counter FROM DANE</sql><sql name="SQL 10">CREATE TABLE IF NOT EXISTS MenNames (Id INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT);
CREATE TABLE IF NOT EXISTS WomenNames (Id INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT);
CREATE TABLE IF NOT EXISTS Countries (Id INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT);
CREATE TABLE IF NOT EXISTS Regions (Id INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT);
CREATE TABLE IF NOT EXISTS Pets (Id INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT);
CREATE TABLE IF NOT EXISTS Professions (Id INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT);

DELETE FROM WomenNames; INSERT INTO WomenNames (Name) SELECT DISTINCT FirstName1 FROM dane;
DELETE FROM MenNames; INSERT INTO MenNames (Name) SELECT DISTINCT FirstName2 FROM dane;
DELETE FROM Countries; INSERT INTO Countries (Name) SELECT DISTINCT Country FROM dane;
DELETE FROM Regions; INSERT INTO Regions (Name) SELECT DISTINCT Region FROM dane;
DELETE FROM Pets; INSERT INTO Pets (Name) SELECT DISTINCT Pet FROM dane;
DELETE FROM Professions; INSERT INTO Professions (Name) SELECT DISTINCT Profession FROM dane;

DROP TABLE Peoples;
CREATE TABLE IF NOT EXISTS Peoples AS 
SELECT D.email, D.Phone, D. BirthDate, D.PAN, D.Company, D.PostalZip, D.GUID, D.Colour, D.Credit, D.RUT, D.&quot;Group&quot;,
	   W.Id AS WomenNameId, M.Id AS MenNameId, C.Id AS CountryId, R.Id AS RegionId, P.Id AS PetId, S.Id AS ProfessionId
FROM dane AS D
   LEFT JOIN WomenNames AS W ON D.FirstName1 = W.Name
   LEFT JOIN MenNames AS M ON D.FirstName2 = M.Name  
   LEFT JOIN Countries AS C ON D.Country = C.Name
   LEFT JOIN Regions AS R ON D.Region = R.Name
   LEFT JOIN Pets AS P ON D.Pet = P.Name
   LEFT JOIN Professions AS S ON D.Profession = S.Name;
   
SELECT * FROM Peoples;</sql><sql name="SQL 11">-- SELECT * FROM Peoples;


CREATE VIEW PeopleInCompany AS
SELECT W.Name AS WomenFirstName,
	   M.Name AS MenFirsNAme,
	   P.Company AS Company,
	   S.Name AS Pet
	   FROM Peoples AS P
	LEFT JOIN WomenNames AS W ON P.WomenNameId=W.Id
	LEFT JOIN MenNames AS M ON P.MenNameId=M.Id
	LEFT JOIN Pets AS S ON P.PetId=S.Id

SELECT * FROM PeopleInCompany</sql><current_tab id="10"/></tab_sql></sqlb_project>
